Networking
1- create vpc
    resource "aws_vpc" "iti" {
    cidr_block = "10.0.0.0/16"
    tags = {
        name = "iti"
    }
    }
2- create internet gateway
    resource "aws_internet_gateway" "gw" {
    vpc_id = aws_vpc.iti.id

    tags = {
        Name = "gw"
    }
    }
3- create public route table
    resource "aws_route_table" "public" {
    vpc_id = aws_vpc.iti.id
    tags={
        Name = "public"
    }
    }
4- create private route table
    resource "aws_route_table" "private" {
    vpc_id = aws_vpc.iti.id
    tags={
        Name = "private"
    }
    }
5- create public route
    resource "aws_route" "r" {
    route_table_id            = aws_route_table.public.id
    destination_cidr_block    = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
    }
6- attach public route table to subnets
    resource "aws_route_table_association" "public1" {
    subnet_id      = aws_subnet.public1.id
    route_table_id = aws_route_table.public.id
    }
    resource "aws_route_table_association" "public2" {
    subnet_id      = aws_subnet.public2.id
    route_table_id = aws_route_table.public.id
    }
    resource "aws_route_table_association" "private1" {
    subnet_id      = aws_subnet.private1.id
    route_table_id = aws_route_table.public.id
    }
    resource "aws_route_table_association" "private2" {
    subnet_id      = aws_subnet.private2.id
    route_table_id = aws_route_table.public.id
    }
Compute
7- create security group which allow ssh from 0.0.0.0/0
    resource "aws_security_group" "public_security_group" {
    name        = "connection"
    description = "Allow traffic to move throug"
    vpc_id      = aws_vpc.iti.id

        ingress {
        description = "to web"
        from_port   = 22
        to_port     = 22
        protocol    = "ssh"
        cidr_blocks = ["0.0.0.0/0"]
        }

    tags = {
        Name = "public"
    }
    }
8- create security group that allow ssh and port 3000 from vpc cidr only
    resource "aws_security_group" "private_security_group" {
    name        = "pachtean"
    description = "Allow ssh connection"
    vpc_id      = aws_vpc.iti.id

    ingress {
        description = "ssh from my machince"
        from_port   = 22
        to_port     = 22
        protocol    = "ssh"
        cidr_blocks = [aws_vpc.iti.cidr_block]
    }
        ingress {
        description = "to web"
        from_port   = 3000
        to_port     = 3000
        protocol    = "tcp"
        cidr_blocks = [aws_vpc.iti.cidr_block]
        }
    tags = {
        Name = "private"
    }
    }
7- create ec2(bastion) in public subnet with security group from 7
	resource "aws_instance" "bastion" {
	  ami           = var.ubuntu
	  instance_type = var.machine_type
	  subnet_id     = module.network.public1_id
	  vpc_security_group_ids = [aws_security_group.public_security_group.id]
	  key_name      = aws_key_pair.deploye_key.key_name
	  provisioner "local-exec" {
	    command = "echo ${self.public_ip} >> inventory"
	  }
	}
8- create ec2(application) private subnet with security group from 8
	resource "aws_instance" "nginx" {
	  ami           = var.ubuntu
	  instance_type = var.machine_type
	  subnet_id     = module.network.public1_id
	  vpc_security_group_ids = [aws_security_group.private_security_group.id]
	  key_name      = aws_key_pair.deploye_key.key_name
	}
